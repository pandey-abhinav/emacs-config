#+TITLE:       Emacs Config
#+AUTHOR:      Abhinav Pandey
#+DESCRIPTION: Emacs configuration for Abhinav Pandey


* Init functions

** init functions

#+begin_src emacs-lisp
    (defun do-nothing()
     "Utility function to make remove default key bindings do nothing."
     (interactive))

    (defun init-functions()
      "Function to estup initial modes."
      (blink-cursor-mode 1)
      (column-number-mode 1)
      (global-subword-mode 1)
      (global-hl-line-mode 1)
      (line-number-mode 1)
      (menu-bar-mode -1)
      (scroll-bar-mode -1)
      (show-paren-mode 1)
      (tool-bar-mode -1)
      (winner-mode 1))
#+end_src


init global variables

#+begin_src emacs-lisp
(defun init-set-global-variables-default()
  "Set default values for global variables."
  (setq-default cursor-type 'bar)
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq-default c-basic-offset 4)
  (setq-default truncate-lines t))


(defun init-set-global-variables()
  "Set values for global variables."
  (setq auto-save-file-name-transforms   '((".*" "~/.emacs.d/saves/" t)))
  (setq backup-by-copying t)
  (setq backup-directory-alist '((".*" . "~/.emacs.d/backup")))
  (setq confirm-kill-emacs 'yes-or-no-p)
  (setq custom-file "~/.emacs.d/custom.el")
  (setq delete-by-moving-to-trash t)
  (setq dired-recursive-deletes t)
  (setq inhibit-startup-screen t)
  (setq mac-command-modifier 'meta)
  (setq mac-control-modifier 'control)
  (setq mac-option-modifier 'super)
  (setq ns-function-modifier 'hyper)
  (setq ring-bell-function 'ignore)
  (setq sentence-end-double-space nil)
  (setq show-paren-delay 0)
  (setq show-paren-style 'parenthesis)
  (setq user-full-name "Abhinav Pandey")
  (setq user-mail-address "pandey.abhinav@icloud.com"))

(defun init-set-global-key-bindings()
  "Setup global key bindings."
  (global-set-key [wheel-left] 'do-nothing)
  (global-set-key [wheel-right] 'do-nothing)
  (global-set-key [double-wheel-left] 'do-nothing)
  (global-set-key [double-wheel-right] 'do-nothing)
  (global-set-key [triple-wheel-left] 'do-nothing)
  (global-set-key [triple-wheel-right] 'do-nothing)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'comment-region)
  (global-set-key (kbd "C-c u") 'uncomment-region)
  (global-set-key (kbd "C-x c") 'compile)
  (global-set-key (kbd "C-c f") (lambda () (interactive) (message (buffer-file-name))))
  (global-set-key (kbd "M-n") (lambda () (interactive) (line-move 5)))
  (global-set-key (kbd "M-p") (lambda () (interactive) (line-move -5))))

(defun init-set-face-attributes()
  "Function to set face attributes for global faces."
  (set-face-attribute 'font-lock-builtin-face nil :foreground "#00b3b3")
  (set-face-attribute 'font-lock-comment-face nil :foreground "#aaaaaa" :slant 'oblique)
  (set-face-attribute 'font-lock-constant-face nil :foreground "#e23860")
  (set-face-attribute 'font-lock-doc-face nil :foreground "#cccccc" :slant 'italic)
  (set-face-attribute 'font-lock-string-face nil :foreground "sienna" :slant 'italic)
  (set-face-attribute 'font-lock-variable-name-face nil :foreground "orange"))


(defun init-set-global-hooks()
  "Function to set global hooks."
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'before-save-hook 'delete-trailing-whitespace))

(defun init-enable-inbuilt-func()
  "Function to enable some inbuilt functions."
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil))

(init-functions)
(init-set-global-key-bindings)
(init-set-global-variables-default)
(init-set-global-variables)
(init-set-face-attributes)
(init-set-global-hooks)
(init-enable-inbuilt-func)
#+end_src


* packages

#+begin_src emacs-lisp
    (require 'package)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
    (package-initialize)
#+end_src

** use package

kewords : https://jwiegley.github.io/use-package/keywords

#+begin_src emacs-lisp
    (require 'use-package)
#+end_src

** ace window

#+begin_src emacs-lisp
    (use-package ace-window
      :ensure t
      :demand t
      :custom (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
      :bind ("C-x o" . ace-window))
#+end_src

** exec-path-from-shell

#+begin_src emacs-lisp
    (use-package exec-path-from-shell
      :ensure t
      :demand t
      :config (exec-path-from-shell-initialize))
#+end_src

** helm

#+begin_src emacs-lisp
    (use-package helm
      :ensure t
      :demand t
      :custom
      (helm-split-window-inside-p t)
      :bind (("C-c h" . helm-command-prefix)
             ("C-x b" . helm-mini)
             ("C-x C-f" . helm-find-files)
             :map helm-map ("<tab>" . helm-execute-persistent-action)
             ("M-x" . helm-M-x))
      :config
      (helm-autoresize-mode))
#+end_src

** magit

#+begin_src emacs-lisp
    (use-package magit
     :ensure t
     :custom (magit-log-show-refname-after-summary t)
     :bind ("C-x g" . magit-status))
#+end_src

** yaml-mode

#+begin_src emacs-lisp
    (use-package yaml-mode
      :ensure t)
#+end_src

** org

#+begin_src emacs-lisp
    (use-package org
      :ensure t
      :custom
      (org-agenda-restore-windows-after-quit t)
      (org-agenda-window-setup 'current-window)
      (org-edit-src-content-indentation 4)
      (org-hide-leading-stars t)
      (org-return-follows-link t)
      (org-src-tab-acts-natively t)
      (org-src-window-setup 'current-window)
      (org-startup-indented t)
      :config
      (visual-line-mode)
      (variable-pitch-mode))
#+end_src
